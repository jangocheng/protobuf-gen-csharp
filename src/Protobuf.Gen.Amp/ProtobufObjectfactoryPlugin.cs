using System;
using System.Text;
using Google.Protobuf.Compiler;
using Google.Protobuf.Reflection;
using Protobuf.Gen.Core;

namespace Protobuf.Gen.Amp
{
    public class ProtobufObjectfactoryPlugin :IPlugin
    {
        public void Process(CodeGeneratorRequest request, CodeGeneratorResponse response)
        {
            if(request.ProtoFile.Count ==0){
                return ;
            }
             string ns = "";
            bool genericEnable =false;
            foreach (var protofile in request.ProtoFile)
            {
                protofile.Options.CustomOptions.TryGetBool(DotBPEOptions.GENERIC_OBJECTFACTORY, out genericEnable);
                if (genericEnable)
                {
                    ns = Utils.GetFileNamespace(protofile);
                    if(string.IsNullOrEmpty(ns))
                    {
                        response.Error = protofile.Name+" don't set namespace";
                        return;
                    }
                    break;
                }
            }
            if(!genericEnable)
            {
                return;
            }

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("// Generated by the protocol buffer compiler.  DO NOT EDIT!");
            sb.AppendLine($"// source: ProtobufObjectfactory");
            //还可以生成注释

            sb.AppendLine("#region Designer generated code");

            sb.AppendLine("");
            sb.AppendLine("using System; ");
            sb.AppendLine("using System.Collections.Generic; ");
            sb.AppendLine("using System.Text; ");
            sb.AppendLine("using Google.Protobuf; ");
            sb.AppendLine("using Google.Protobuf.Reflection; ");
            sb.AppendLine("");

            sb.AppendLine("namespace " + ns + " {");
            //生成代码

            sb.AppendLine("public class ProtobufObjectFactory {");

            sb.AppendLine("public static IMessage GetRequestTemplate(int serviceId,int messageId)");
            sb.AppendLine("{");
            foreach (var protofile in request.ProtoFile)
            {
                try{
                    GenerateByEachFile(protofile, response,sb,1);
                }
                catch(Exception ex){                  
                    response.Error += "file:" + protofile.Name + ":" + ex.Message + ex.StackTrace;
                }
            }
            sb.AppendLine("return null;");
            sb.AppendLine("}");


            sb.AppendLine("public static IMessage GetResponseTemplate(int serviceId,int messageId)");
            sb.AppendLine("{");
            foreach (var protofile in request.ProtoFile)
            {
                try{
                    GenerateByEachFile(protofile, response,sb,2);
                }
                catch(Exception ex){                   
                    response.Error +=  "file:"+protofile.Name+":"+ ex.Message + ex.StackTrace;
                }
            }
            sb.AppendLine("return null;");
            sb.AppendLine("}");


            sb.AppendLine("}");
            sb.AppendLine("}");
            sb.AppendLine("#endregion");

            //生成文件
            var nfile = new CodeGeneratorResponse.Types.File
            {
                Name = "ProtobufObjectfactory.cs",
                Content = sb.ToString()
            };
            response.File.Add(nfile);
        }
        private void GenerateByEachFile(FileDescriptorProto protofile, CodeGeneratorResponse response,StringBuilder sb,int type)
        {
            bool genericEnable;
            protofile.Options.CustomOptions.TryGetBool(DotBPEOptions.GENERIC_OBJECTFACTORY, out genericEnable);
            if (!genericEnable)
            {
                return;
            }
            if (protofile.Service == null || protofile.Service.Count <= 0) return;


            foreach (ServiceDescriptorProto t in protofile.Service)
            {
                GenerateEachService(t, sb,type);
                sb.AppendLine("");
            }

        }

        private void GenerateEachService(ServiceDescriptorProto service, StringBuilder sb,int type)
        {
            int serviceId;
            bool hasServiceId = service.Options.CustomOptions.TryGetInt32(DotBPEOptions.SERVICE_ID, out serviceId);
            if (!hasServiceId || serviceId <= 0)
            {
                throw new Exception("Service=" + service.Name + " ServiceId NOT_FOUND");
            }
            if (serviceId >= ushort.MaxValue)
            {
                throw new Exception("Service=" + service.Name + "ServiceId too large");
            }


            //循环方法
            foreach (var method in service.Method)
            {
                int msgId ;
                bool hasMsgId= method.Options.CustomOptions.TryGetInt32(DotBPEOptions.MESSAGE_ID,out msgId);
                if (!hasMsgId || msgId <= 0)
                {
                    throw new Exception("Service" + service.Name + "." + method.Name + " ' MessageId NOT_FINDOUT ");
                }
                if (msgId >= ushort.MaxValue)
                {
                    throw new Exception("Service" + service.Name + "." + method.Name + " is too large");
                }
                //异步方法


                string typeName = type==1? Utils.GetTypeName(method.InputType): Utils.GetTypeName(method.OutputType);

                sb.AppendLine("if(serviceId == "+serviceId+" && messageId == "+msgId+"){ return new "+typeName+"() ;\n}");

            }
            //循环方法end

        }
    }
}
